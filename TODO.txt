FilWip v0.x (x86/ppc)
TODO/Bug-List Notes:

To Do
*	Made all the items to be cleaned as text file plugins. Format has been fixed (similar to
	INI format of Windows) and has parsing routine that works a 100%. A framework of
	BLists has been setup (3 BLists, one inside another). The outermost storing the
	PluginContainer, having a name and type (linear or hierarchial) and each container
	item containing a list of all subitems and each subItem having a name, folder/file,
	location, include mime/exclude file etc. Note absolutely NO error checking for messed
	up plugins have been done. If a plugin has a slight mistake, all hell can break lose!
	[STATUS: DONE]
	[DETAIL:  Also a major step of generating controls based on plugins, handling its
		collapses/expansions, storing prefs of trees and checkboxes has been done.]


*	Must find a way to improve the startup time (may be even parsing speed)...
	Maybe by tweaking the MainWindows' Show() implementation we can do a bit
	but Show()ing a window -before- parsing causes a few problems because 
	FrameResized() is called and since before parsing, the checkboxes are NOT 
	generated and causes some problems for RecalcScrollBar() function...
	[STATUS: DONE]
	[DETAIL: Thanks to BeShare developer Jeremy Freisner for giving me the idea of
		implementing the startup process via MessageReceived. This made sense as
		the loopers are locked automatically AND the user's requests such as resizing
		is kept in queue until the process is over AND its amazingly fast and more
		importantly flicker-free and to a certain extent smooth.]


*	Must find a better way to store plugin prefs... Right now the index of the checkBoxes'
	BList is used. So if the user fiddle's around with the prefs they are messed up while
	they are loaded at startup. For example if a plugin is removed and there are plugins to
	follow, those following plugins will get the removed plugin's setting because while storing
	the prefs the plugin would have existed.
	[STATUS: CLOSED]
	[DETAIL: Using the index seems to be the best way out since the user can keep on
		fiddling with the prefs its upto him to reset the value of other plugins from
		FilWip. After all this isn't a big deal. Just a click of the mouse button is enough.]


*	Must find a way to reduce flicker while startup and rendering of checkboxes because
	the rendering process is done after the window is painted on-screen (asynchronous
	mode)...
	[STATUS: DONE]
	[DETAIL: Flickering has reduced considerably now, after making hierarchial items
		collapsed (and not expanded) by default. What was done before was the items
		are rendered fully, then collapsed. So collapsed items caused flicker and looked
		ugly, but expanding the items seems smoother and looks better.]


*	Multiple volumes support. Now this could be done using BVolume and BVolumeRoster
	class but the Plugins should not add the "/boot" to their paths, we must add this based
	on the selected volume. The trouble is testing the thing, I don't have multiple BFS
	volumes. The third thing is finding out if the volume is really BFS or not. Finding out
	BFS can probably be done by checking for a few BeOS specific paths/files and by 
	checking if KnowsQuery(), KnowsAttr() etc. return true.
	[STATUS: CLOSED]
	[DETAIL: Forgotten all about this now. No intention of adding it as it is now possible
		to clean multiple volumes through plugins.]


*	Implement plugin-sets. Plugin-sets means the user should be able to choose the 
	Plugin-folder during run-time.
	[STATUS: PENDING]
	[DETAIL: Possible but needs a bit of work and thinking. What will happen to presets
		that store based on Index on different plugin-sets?]


*	Introduced debug mode for letting the user debug plugins with bad paths. Nothing 
	much to say about this. But what we need next is to show the user the file name
	of the plugin with the bad path to make life even easier. This needs some work as
	we need to keep passing the file name to many functions and finally to the looper
	itself. Anyway it can be done quite easily, left for another day.
	[STATUS: DONE]
	[DETAIL: All went smooth. The file name has been passed on-and-and-on to all
		the functions till we got to the looper :) Anyway its done now.]


*	Implement node monitoring. This is more difficult than I first anticipated. This is because
	what we need is a unique blend of entry and node monitoring. If entries are renamed etc.
	we should not show that among the overview ie. n files, n bytes and so on. Further
	complexities are added as we have to incorporate monitoring files based on filename and
	mimetype exclusions/inclusions. Anyway, it must be done and is a nice programming
	challenge.
	[STATUS: DONE]
	[DETAIL: Its finally done but has a few limitations. First when monitoring a single file
		say "bash history" and we rename the FOLDER in which its present, the file is still
		monitored but it should not be. Secondly, when monitoring folders, when its
		parent folder is renamed the monitoring continues. Apart from that everything
		SEEMS ok.]


*	Implement node monitoring for preview mode as well. Right now the node monitoring
	has been done quite well for the overview feature. What needs to be next is to first
	implement preview then upgrade the FileLooper class to support monitoring according
	to both the overview and the preview.
	[STATUS: PENDING]
	[DETAIL: Preview is yet to be done.]


*	Implement a preference panel with a list of sub-preferences like that in SampleStudio,
	except we are going to implement the preferences using Buttons like in WinMX or
	FilZip's about box.
	[STATUS: IN PROGRESS]
	[DETAIL: We are using a ListView after all. Using function pointers the implementation
		has been done. And seems to be generic enough. This framework makes it easy
		to add panels, save/load panels etc. Works very well so far.]


*	Make node monitoring faster. The only way is to use a hash table for generating
	buckets and nodes with node_refs and possible entry_refs. Then the key-value pair
	would be node_ref-entry_ref.
	[STATUS: DONE]
	[DETAIL: Finally the Hash table class is up and running and has been neatly integrated
		into the FileLooper class. The FileLooper class WITHOUT the hash table is named
		as FileLooper_.cpp, FileLooper_.h. These 2 are not included in the project
		but are kept as backup (now transferred to Deprecated folder).]


*	Provide the option of synchronous as well as asynchronous loading of plugins at 
	startup. In Synchronous: the window is shown to the user after all the plugins have
	been parsed and added to the GUI while in asynchronous the window is shown initially,
	then the plugins are parsed and added in the visible window.
	[STATUS: DONE]
	[DETAIL: Its been done, the only thing left is to put an "if" part to check which option
		is there in the preferences. Right now its left commented in the Show() hook of
		the MainWindow class.]


*	Reduce flicker in the infoViews. When many files are created or deleted the infoView
	control updates with the file size and file numbers. This flickers. Must find a way to
	sync. it so that flickering is reduced.
	[STATUS: CLOSED]
	[DETAIL: Hmm, difficult because BStringView does not implement double buffered draws.
		ie it doesn't draw to a BBitmap and finally render it to a view. So flicker cannot
		be removed. Maybe we can code a neat BStringView class of our own that 
		does not flicker using double-buffered draws like StaticLabel of BeConverter.
		Right now this is not given much priority in my list of things to do.]


*	Make infoviews clickable. When clicked the corresponding checkbox should be selected
	or make it open that folder of the item. If it is a file, open parent folder.
	[STATUS: DONE]
	[DETAIL: An StrInfoView class must be made and its MouseDown() must be
		over-ridden, which must open the folder of the particular item. If its a file, open
		it's parent folder... It's done and in a neat and complete manner.]


*	Wrote the Eraser looper class. Its work is simple. It has a public BList which will be
	filled up with BEntrys by the FileLooper class. Then MainWindow class asks it to
	empty the BList and it does that. Expected a heavy increase in speed. The class
	as such is quite complete, the deleting part is to be done (until the correctness
	is totally verified)
	[STATUS: DONE]
	[DETAIL: The deleting part of the EraserLooper works now. The BList is filled
		with paths (strings) rather than BEntrys because each BEntry consumes
		a file descriptor and thus we run out of file descriptors when there are
		about 200 files to be deleted. So stores the path, creates a BEntry during
		the delete operation.]


*	Update FileLooper class to communicate with the Eraser looper. Works fine with
	correct locking. But the Wipe... functions still remain in the FileLooper code. This
	will soon be removed when Eraser looper works fine (ie after testing also).
	[STATUS: DONE]
	[DETAIL: Wipe functions are removed from the FileLooper class as the
		EraserLooper class works fine.]


*	Report must be prepared, and is yet to be decided from where it is to be
	prepared and showed from the MainWindow or EraserLooper. Temporarily
	it is being done from the EraserLooper, the values are corrupted. Work is
	being done to correct this.
	[STATUS: DONE]
	[DETAIL: Report is currently being shown by the EraserLooper class. I don't
		know if MainWindow should be informed after the deletion is complete.
		So far I didn't find a need, maybe it will change in the future.]


*	Must implement statusbar or barber pole. Many people requested this. The
	barber pole animation was the choice when the number of files where not
	known before deleting. Now that it is, the status bar is preferred. It is safer,
	simpler, faster and bug-less.
	[STATUS: DONE]
	[DETAIL: The Preset popup is hidden, the status bar is shown during the
		delete operation, then the status bar is re-hidden AFTER the delete.
		This showing/hiding is done by the MainWindow, not handled by
		the EraserLooper. The updating of the statusbar is however handled
		by the EraserLooper (it post messages to make the updating
		asynchronous).]

- Ram
<ramshankar@themail.com>
BeShare/IRC nick: Somebody
